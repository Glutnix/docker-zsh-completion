#compdef docker
#
# zsh completion for docker (http://docker.com)
#
# version:  0.3.0
# github:   https://github.com/felixr/docker-zsh-completion
#
# contributors:
#   - Felix Riedel
#   - Steve Durrheimer
#   - Vincent Bernat
#
# license:
#
# Copyright (c) 2013, Felix Riedel
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

__docker_get_containers() {
    integer ret=1
    local kind
    declare -a running stopped lines args

    kind=$1
    shift
    [[ $kind = (stopped|all) ]] && args=($args -a)

    lines=(${(f)"$(_call_program commands docker ps ${args})"})

    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( $j < ${#header} - 1 )) {
        i=$(( $j + ${${header[$j,-1]}[(i)[^ ]]} - 1))
        j=$(( $i + ${${header[$i,-1]}[(i)  ]} - 1))
        k=$(( $j + ${${header[$j,-1]}[(i)[^ ]]} - 2))
        begin[${header[$i,$(($j-1))]}]=$i
        end[${header[$i,$(($j-1))]}]=$k
    }
    lines=(${lines[2,-1]})

    # Container ID
    local line
    local s
    for line in $lines; do
        s="${line[${begin[CONTAINER ID]},${end[CONTAINER ID]}]%% ##}"
        s="$s:${(l:15:: :::)${${line[${begin[CREATED]},${end[CREATED]}]/ ago/}%% ##}}"
        s="$s, ${${${line[$begin[IMAGE],$end[IMAGE]]}/:/\\:}%% ##}"
        if [[ ${line[${begin[STATUS]},${end[STATUS]}]} = Exit* ]]; then
            stopped=($stopped $s)
        else
            running=($running $s)
        fi
    done

    # Names
    local name
    local -a names
    for line in $lines; do
        names=(${(ps:,:)${${line[${begin[NAMES]},-1]}%% *}})
        for name in $names; do
            s="${name}:${(l:15:: :::)${${line[${begin[CREATED]},${end[CREATED]}]/ ago/}%% ##}}"
            s="$s, ${${${line[$begin[IMAGE],$end[IMAGE]]}/:/\\:}%% ##}"
            if [[ ${line[${begin[STATUS]},${end[STATUS]}]} = Exit* ]]; then
                stopped=($stopped ${s#*/})
            else
                running=($running ${s#*/})
            fi
        done
    done

    [[ $kind = (running|all) ]] && _describe -t containers-running "running containers" running "$@" && ret=0
    [[ $kind = (stopped|all) ]] && _describe -t containers-stopped "stopped containers" stopped "$@" && ret=0
    return ret
}

__docker_stoppedcontainers() {
    __docker_get_containers stopped "$@"
}

__docker_runningcontainers() {
    __docker_get_containers running "$@"
}

__docker_containers () {
    __docker_get_containers all "$@"
}

__docker_images () {
    integer ret=1
    declare -a images
    images=(${${${(f)"$(_call_program commands docker images)"}[2,-1]}/(#b)([^ ]##) ##([^ ]##) ##([^ ]##)*/${match[3]}:${(r:15:: :::)match[2]} in ${match[1]}})
    _describe -t docker-images "images" images && ret=0
    __docker_repositories_with_tags && ret=0
    return ret
}

__docker_repositories () {
    declare -a repos
    repos=(${${${(f)"$(_call_program commands docker images)"}%% *}[2,-1]})
    repos=(${repos#<none>})
    _describe -t docker-repos "repositories" repos
}

__docker_repositories_with_tags() {
    integer ret=1
    declare -a repos onlyrepos matched
    declare m
    repos=(${${${${(f)"$(_call_program commands docker images)"}[2,-1]}/ ##/:::}%% *})
    repos=(${${repos%:::<none>}#<none>})
    # Check if we have a prefix-match for the current prefix.
    onlyrepos=(${repos%::*})
    for m in $onlyrepos; do
        [[ ${PREFIX%%${~~m}} != ${PREFIX} ]] && {
            # Yes, complete with tags
            repos=(${${repos/:::/:}/:/\\:})
            _describe -t docker-repos-with-tags "repositories with tags" repos && ret=0
            return ret
        }
    done
    # No, only complete repositories
    onlyrepos=(${${repos%:::*}/:/\\:})
    _describe -t docker-repos "repositories" onlyrepos -qS : && ret=0

    return ret
}

__docker_search() {
    local cache_policy
    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __docker_caching_policy
    fi

    local searchterm cachename
    searchterm="${words[$CURRENT]%/}"
    cachename=_docker-search-$searchterm

    local expl
    local -a result
    if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid ${cachename#_} ) \
        && ! _retrieve_cache ${cachename#_}; then
        _message "Searching for ${searchterm}..."
        result=(${${${(f)"$(_call_program commands docker search ${searchterm})"}%% *}[2,-1]})
        _store_cache ${cachename#_} result
    fi
    _wanted dockersearch expl 'available images' compadd -a result
}

__docker_caching_policy()
{
  oldp=( "$1"(Nmh+1) )     # 1 hour
  (( $#oldp ))
}

__docker_commands () {
    # local -a  _docker_subcommands
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __docker_caching_policy
    fi

    if ( [[ ${+_docker_subcommands} -eq 0 ]] || _cache_invalid docker_subcommands) \
        && ! _retrieve_cache docker_subcommands;
    then
        local -a lines
        lines=(${(f)"$(_call_program commands docker 2>&1)"})
        _docker_subcommands=(${${${lines[$((${lines[(i)Commands:]} + 1)),${lines[(I)    *]}]}## #}/ ##/:})
        _docker_subcommands=($_docker_subcommands 'help:Show help for a command')
        _store_cache docker_subcommands _docker_subcommands
    fi
    _describe -t docker-commands "docker command" _docker_subcommands
}

__docker_subcommand () {
    local -a _command_args
    local expl
    integer ret=1
    case "$words[1]" in
        (attach)
            _arguments \
                '--no-stdin[Do not attach stdin]' \
                '--sig-proxy[Proxy all received signals to the process (non-TTY mode only)]' \
                ':containers:__docker_runningcontainers' && ret=0
            ;;
        (build)
            _arguments \
                '(-f --file)'{-f,--file=-}'[Dockerfile to use]:Dockerfile:_files' \
                '--force-rm[Always remove intermediate containers]' \
                '--no-cache[Do not use cache when building the image]' \
                '--pull[Attempt to pull a newer version of the image]' \
                '(-q --quiet)'{-q,--quiet}'[Suppress verbose build output]' \
                '--rm[Remove intermediate containers after a successful build]' \
                '(-t --tag)'{-t,--tag=-}'[Repository, name and tag to be applied]: :__docker_repositories_with_tags' \
                ':path or URL:_directories' && ret=0
            ;;
        (commit)
            _arguments \
                '(-a --author)'{-a,--author=-}'[Author]:author: ' \
                '(-m --message)'{-m,--message=-}'[Commit message]:message: ' \
                '(-p --pause)'{-p,--pause}'[Pause container during commit]' \
                ':container:__docker_containers' \
                ': :__docker_repositories_with_tags' && ret=0
            ;;
        (cp)
            _arguments \
                ':container:->container' \
                ':hostpath:_files' && ret=0
            case $state in
                (container)
                    if compset -P '*:'; then
                        _files && ret=0
                    else
                        __docker_containers -qS ":" && ret=0
                    fi
                    ;;
            esac
            ;;
        (diff|export)
            _arguments '*:containers:__docker_containers' && ret=0
            ;;
        (events)
            _arguments \
                '*'{-f,--filter=-}'[Filter values]:filter: ' \
                '--since=-[Events created since this timestamp]:timestamp: ' \
                '--until=-[Events created until this timestamp]:timestamp: ' && ret=0
            ;;
        (exec)
            local state ret
            _arguments \
                '(-d --detach)'{-d,--detach}'[Detached mode: leave the container running in the background]' \
                '(-i --interactive)'{-i,--interactive}'[Keep stdin open even if not attached]' \
                '(-t --tty)'{-t,--tty}'[Allocate a pseudo-tty]' \
                ':containers:__docker_runningcontainers' \
                '*::command:->anycommand' && ret=0

            case $state in
                (anycommand)
                    shift 1 words
                    (( CURRENT-- ))
                    _normal && ret=0
                    ;;
            esac

            return ret
            ;;
        (history)
            _arguments \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                '*: :__docker_images' && ret=0
            ;;
        (images)
            _arguments \
                '(-a --all)'{-a,--all}'[Show all images]' \
                '*'{-f,--filter=-}'[Filter values]:filter: ' \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                ': :__docker_repositories' && ret=0
            ;;
        (inspect)
            _arguments \
                '(-f --format=-)'{-f,--format=-}'[Format the output using the given go template]:template: ' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (import)
            _arguments \
                ':URL:(- http:// file://)' \
                ': :__docker_repositories_with_tags' && ret=0
            ;;
        (info)
            ;;
        (import)
            _arguments \
                ':URL:(- http:// file://)' \
                ': :__docker_repositories_with_tags' && ret=0
            ;;
        (insert)
            _arguments '1:containers:__docker_containers' \
                       '2:URL:(http:// file://)' \
                       '3:file:_files' && ret=0
            ;;
        (kill)
            _arguments \
                '(-s --signal)'{-s,--signal=-}'[Signal to send]:signal:_signals' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (load)
            _arguments \
                '(-i --input)'{-i,--input=-}'[Read from tar archive file]:archive file:_files -g "*.((tar|TAR)(.gz|.GZ|.Z|.bz2|.lzma|.xz|)|(tbz|tgz|txz))(-.)"' && ret=0
            ;;
        (login)
            _arguments \
                '(-e --email)'{-e,--email=-}'[Email]:email: ' \
                '(-p --password)'{-p,--password=-}'[Password]:password: ' \
                '(-u --user)'{-u,--user=-}'[Username]:username: ' \
                ':server: ' && ret=0
            ;;
        (logout)
            _arguments \
                ':server: ' && ret=0
            ;;
        (logs)
            _arguments \
                '(-f --follow)'{-f,--follow}'[Follow log output]' \
                '(-t --timestamps)'{-t,--timestamps}'[Show timestamps]' \
                '--tail=-[Output the last K lines]:lines:(1 10 20 50 all)' \
                '*:containers:__docker_containers' && ret=0
            ;;
        (port)
            _arguments \
                '1:containers:__docker_runningcontainers' \
                '2:port:_ports' && ret=0
            ;;
        (pause|unpause)
            _arguments \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (start)
            _arguments \
                '(-a --attach)'{-a,--attach}'[Attach container'"'"'s stdout/stderr and forward all signals]' \
                '(-i --interactive)'{-i,--interactive}'[Attach container'"'"'s stding]' \
                '*:containers:__docker_stoppedcontainers' && ret=0
            ;;
        (stats)
            _arguments \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (rm)
            _arguments \
                '(-f --force)'{-f,--force}'[Force removal]' \
                '(-l --link)'{-l,--link}'[Remove the specified link and not the underlying container]' \
                '(-v --volumes)'{-v,--volumes}'[Remove the volumes associated to the container]' \
                '*:containers:__docker_stoppedcontainers' && ret=0
            ;;
        (rmi)
            _arguments \
                '(-f --force)'{-f,--force}'[Force removal]' \
                '--no-prune[Do not delete untagged parents]' \
                '*: :__docker_images' && ret=0
            ;;
        (restart|stop)
            _arguments \
                '(-t --time=-)'{-t,--time=-}'[Number of seconds to try to stop for before killing the container]:seconds to before killing:(1 5 10 30 60)' \
                '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (top)
            _arguments \
                '1:containers:__docker_runningcontainers' \
                '(-)*:: :->ps-arguments' && ret=0
            case $state in
                (ps-arguments)
                    _ps && ret=0
                    ;;
            esac

            ;;
        (ps)
            _arguments \
                '(-a --all)'{-a,--all}'[Show all containers]' \
                '--before=-[Show only container created before...]:containers:__docker_containers' \
                '*'{-f,--filter=-}'[Filter values]:filter: ' \
                '(-l --latest)'{-l,--latest}'[Show only the latest created container]' \
                '-n[Show n last created containers, include non-running one]:n:(1 5 10 25 50)' \
                '--no-trunc[Do not truncate output]' \
                '(-q --quiet)'{-q,--quiet}'[Only show numeric IDs]' \
                '(-s --size)'{-s,--size}'[Display total file sizes]' \
                '--since=-[Show only containers created since...]:containers:__docker_containers' && ret=0
            ;;
        (tag)
            _arguments \
                '(-f --force)'{-f,--force}'[force]'\
                ':source:__docker_images'\
                ':destination:__docker_repositories_with_tags' && ret=0
            ;;
        (create|run)
            _arguments \
                '(-a --attach)'{-a,--attach}'[Attach to stdin, stdout or stderr]' \
                '*--add-host=-[Add a custom host-to-IP mapping]:host\:ip mapping: ' \
                '(-c --cpu-shares)'{-c,--cpu-shares=-}'[CPU shares (relative weight)]:CPU shares:(0 10 100 200 500 800 1000)' \
                '*--cap-add=-[Add Linux capabilities]:capability: ' \
                '*--cap-drop=-[Drop Linux capabilities]:capability: ' \
                '--cidfile=-[Write the container ID to the file]:CID file:_files' \
                '--cpuset=-[CPUs in which to allow execution]:CPU set: ' \
                '(-d --detach)'{-d,--detach}'[Detached mode: leave the container running in the background]' \
                '*--device=-[Add a host device to the container]:device:_files' \
                '*--dns=-[Set custom dns servers]:dns server: ' \
                '*--dns-search=-[Set custom DNS search domains]:dns domains: ' \
                '*'{-e,--environment=-}'[Set environment variables]:environment variable: ' \
                '--entrypoint=-[Overwrite the default entrypoint of the image]:entry point: ' \
                '*--env-file=-[Read environment variables from a file]:environment file:_files' \
                '*--expose=-[Expose a port from the container without publishing it]: ' \
                '(-h --hostname)'{-h,--hostname=-}'[Container host name]:hostname:_hosts' \
                '(-i --interactive)'{-i,--interactive}'[Keep stdin open even if not attached]' \
                '*--link=-[Add link to another container]:link:->link' \
                '*--lxc-conf=-[Add custom lxc options]:lxc options: ' \
                '-m[Memory limit (in bytes)]:limit: ' \
                '--name=-[Container name]:name: ' \
                '--net=-[Network mode]:network mode:(bridge none container host)' \
                '(-P --publish-all)'{-P,--publish-all}'[Publish all exposed ports]' \
                '*'{-p,--publish=-}'[Expose a container'"'"'s port to the host]:port:_ports' \
                '--privileged[Give extended privileges to this container]' \
                '--restart=-[Restart policy]:restart policy:(no on-failure always)' \
                '--rm[Remove intermediate containers when it exits]' \
                '*--security-opt=-[Security options]:security option: ' \
                '--sig-proxy[Proxy all received signals to the process (non-TTY mode only)]' \
                '(-t --tty)'{-t,--tty}'[Allocate a pseudo-tty]' \
                '(-u --user)'{-u,--user=-}'[Username or UID]:user:_users' \
                '*-v[Bind mount a volume]:volume: '\
                '*--volumes-from=-[Mount volumes from the specified container]:volume: ' \
                '(-w --workdir)'{-w,--workdir=-}'[Working directory inside the container]:directory:_directories' \
                '(-): :__docker_images' \
                '(-):command: _command_names -e' \
                '*::arguments: _normal' && ret=0

            case $state in
                (link)
                    if compset -P '*:'; then
                        _wanted alias expl 'Alias' compadd -E "" && ret=0
                    else
                        __docker_runningcontainers -qS ":" && ret=0
                    fi
                    ;;
            esac

            ;;
        (pull)
            _arguments \
                '(-a --all-tags)'{-a,--all-tags}'[Download all tagged images]' \
                ':name:__docker_search' && ret=0
            ;;
        (push)
            _arguments ': :__docker_images' && ret=0
            ;;
        (rename)
            _arguments \
                ':old name:__docker_containers' \
                ':new name: ' && ret=0
            ;;
        (save)
            _arguments \
                '(-o --output)'{-o,--output=-}'[Write to file]:file:_files' \
                '*: :__docker_images' && ret=0
            ;;
        (search)
            _arguments \
                '--automated[Only show automated builds]' \
                '--no-trunc[Do not truncate output]' \
                '(-s --stars)'{-s,--stars=-}'[Only display with at least X stars]:stars:(0 10 100 1000)' \
                ':term: ' && ret=0
            ;;
        (wait)
            _arguments '*:containers:__docker_runningcontainers' && ret=0
            ;;
        (help)
            _arguments ':subcommand:__docker_commands' && ret=0
            ;;
        (*)
            _message 'Unknown sub command'
    esac

    return ret
}

_docker () {
    # Support for subservices, which allows for `compdef _docker docker-shell=_docker_containers`.
    # Based on /usr/share/zsh/functions/Completion/Unix/_git without support for `ret`.
    if [[ $service != docker ]]; then
        _call_function - _$service
        return
    fi

    local curcontext="$curcontext" state line
    integer ret=1
    typeset -A opt_args

    _arguments -C \
        '--api-cors-header=-[Set CORS headers in the remote API]:CORS headers: ' \
        '(-b --bridge)'{-b,--bridge=-}'[Attach containers to a network bridge]:bridge:_net_interfaces' \
        '--bip=-[Specify network bridge IP]' \
        '(-D --debug)'{-D,--debug}'[Enable debug mode]' \
        '(-d --daeamon)'{-d,--daemon}'[Enable daemon mode]' \
        '--default-gateway[Container default gateway IPv4 address]:IPv4 address: ' \
        '--default-gateway-v6[Container default gateway IPv6 address]:IPv6 address: ' \
        '*--dns=-[DNS server to use]:DNS: ' \
        '*--dns-search=-[DNS search domains to use]' \
        '*--default-ulimit=-[Set default ulimit settings for containers]:ulimit: ' \
        '(-e --exec-driver)'{-e,--exec-driver=-}'[Exec driver to use]:driver:(native lxc windows)' \
        '*--exec-opt=-[Set exec driver options]:exec driver options: ' \
        '--exec-root=-[Root of the Docker execdriver (default: /var/run/docker)]:path:_directories' \
        '--fixed-cidr=-[IPv4 subnet for fixed IPs]:IPv4 subnet: ' \
        '--fixed-cidr-v6=-[IPv6 subnet for fixed IPs]:IPv6 subnet: ' \
        '(-G --group)'{-G,--group=-}'[Group for the unix socket (default: docker)]:group:_groups' \
        '(-g --graph)'{-g,--graph=-}'[Root of the Docker runtime (default: /var/lib/docker)]:path:_directories' \
        '(-H --host)'{-H,--host=-}'[tcp://host:port to bind/connect to]:host: ' \
        '--icc[Enable inter-container communication]' \
        '*--insecure-registry=-[Enable insecure registry communication]:registry: ' \
        '--ip=-[Default IP when binding container ports]' \
        '--ip-forward[Enable net.ipv4.ip_forward]' \
        '--ip-masq[Enable IP masquerading]' \
        '--iptables[Enable addition of iptables rules]' \
        '--ipv6[Enable IPv6 networking]' \
        '(-l --log-level)'{-l,--log-level=-}'[Set the logging level]:level:(debug info warn error fatal)' \
        '*--label=-[Set key=value labels to the daemon]:label: ' \
        '--log-driver=-[Default driver for container logs]:Logging driver:(json-file syslog journald gelf fluentd none)' \
        '*--log-opt=-[Log driver specific options]:log driver options: ' \
        '--mtu=-[Set the containers network MTU]:mtu:(0 576 1420 1500 9000)' \
        '(-p --pidfile)'{-p,--pidfile=-}'[Path to use for daemon PID file (default: /var/run/docker.pid)]:PID file:_files' \
        '*--registry-mirror=-[Preferred Docker registry mirror]:registry mirror: ' \
        '(-s --storage-driver)'{-s,--storage-driver=-}'[Storage driver to use]:driver:(aufs devicemapper btrfs zfs overlay)' \
        '--selinux-enabled[Enable selinux support]' \
        '*--storage-opt=-[Set storage driver options]:storage driver options: ' \
        '--tls[Use TLS]' \
        '--tlscacert=-[Trust certs signed only by this CA]:PEM file:_files -g "*.(pem|crt)"' \
        '--tlscert=-[Path to TLS certificate file]:PEM file:_files -g "*.(pem|crt)"' \
        '--tlskey=-[Path to TLS key file]:Key file:_files -g "*.(pem|key)"' \
        '--tlsverify[Use TLS and verify the remote]' \
        '--userland-proxy[Use userland proxy for loopback traffic]' \
        '(-v --version)'{-v,--version}'[Print version information and quit]' \
        '(-): :->command' \
        '(-)*:: :->option-or-argument' && ret=0

    case $state in
        (command)
            __docker_commands && ret=0
            ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:docker-$words[1]:
            __docker_subcommand && ret=0
            ;;
    esac

    return ret
}

_docker "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: ft=zsh sw=4 ts=4 et
